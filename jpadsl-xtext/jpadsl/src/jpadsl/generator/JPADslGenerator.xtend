/*
 * generated by Xtext
 */
package jpadsl.generator

import com.google.inject.Inject
import jpadsl.jPADsl.Entity
import jpadsl.jPADsl.Feature
import jpadsl.jPADsl.ManyToManyMappedByRelationshipAttribute
import jpadsl.jPADsl.ManyToManyRelationshipAttribute
import jpadsl.jPADsl.ManyToOneJoinColumnRelationShipAttribute
import jpadsl.jPADsl.ManyToOneJoinTableRelationShipAttribute
import jpadsl.jPADsl.ManyToOneMappedByRelationShipAttribute

import jpadsl.jPADsl.OneToManyJoinTableRelationshipAttribute
import jpadsl.jPADsl.OneToManyMappedByRelationshipAttribute
import jpadsl.jPADsl.OneToOneMappedByRelationshipAttribute
import jpadsl.jPADsl.OneToOneRelationshipAttribute
import jpadsl.jPADsl.UpdatableInternalAttribute
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.generator.IGenerator
import jpadsl.jPADsl.PackageDeclaration
import jpadsl.jPADsl.IdAttribute
import jpadsl.jPADsl.Identifier
import jpadsl.jPADsl.OneToManyJoinColumnRelationshipAttribute
import jpadsl.generator.JPADslGeneratorExtensions
import jpadsl.jPADsl.Model

class JPADslGenerator implements IGenerator {
	
	@Inject extension JPADslGeneratorExtensions generatorExtensions

	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		
		
		var model = resource.contents.head as Model
		
		for (packageDeclaration : model.elements.filter(typeof(PackageDeclaration))) {
			
			for(entity: packageDeclaration.elements.filter(typeof(Entity))) {
				fsa.generateFile(entity.packageName().replaceAll("\\.","/")+"/" + entity.name + ".java", entity.compile)
			}
			
		}
		
	}

	
	def compile(Entity e) ''' 
		
package «e.packageName()»;

/**
 * Imports.
 **/
 
import java.io.Serializable;
«IF e.cacheable != null»
import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;
import org.jboss.annotation.ejb.cache.simple.CacheConfig;
«ENDIF»
 
 «val imports = imports(e)»
 «imports»
 
 @Entity
 @javax.persistence.Table(name = "«val tablename = tablename(e)»«tablename»")
 «IF (e.readOnly == null)»«val sequenceGenerator = sequenceGenerator(e.name)»«sequenceGenerator»«ENDIF»
 «IF e.cacheable != null»
 @Cache(usage = CacheConcurrencyStrategy.READ_WRITE, include = "all")
«ENDIF»
 public class «e.name» «IF e.superType != null» extends «e.superType.name»«ENDIF» implements Serializable {
 
 	/**
     * Properties.
     **/
     
    «val identifier = identifier(e.identifier, e.name.toFirstLower(), e.name.substituteCamelsForUpperCaseAndUnderScores, e)»
	«identifier»
	
	«FOR ua:e.features.filter(typeof(UpdatableInternalAttribute))»
		«val updatableAttribute = updatableAttribute(ua, e.name)»
		«updatableAttribute»

	«ENDFOR»
	
	«FOR r:e.features.filter(typeof(OneToOneRelationshipAttribute))»
		«val oneToOneRelationship = oneToOneRelationship(r, e.name.substituteCamelsForUpperCaseAndUnderScores)»
		«oneToOneRelationship»
	«ENDFOR»
	
	«FOR r:e.features.filter(typeof(OneToOneMappedByRelationshipAttribute))»
		«val oneToOneMappedBy = oneToOneMappedBy(r, e.name)»
		«oneToOneMappedBy»
	«ENDFOR»
	
	«FOR r:e.features.filter(typeof(OneToManyJoinTableRelationshipAttribute))»
		«val oneToManyJoinTable = oneToManyJoinTable(r, e.name, r.name, e)»
		«oneToManyJoinTable»
	«ENDFOR»
	
	«FOR r:e.features.filter(typeof(OneToManyJoinColumnRelationshipAttribute))»
		«val oneToManyJoinColumn = oneToManyJoinColumn(r, e.name, r.name, e)»
		«oneToManyJoinColumn»
	«ENDFOR»
	
	«FOR r:e.features.filter(typeof(OneToManyMappedByRelationshipAttribute))»
		«val oneToManyMappedBy = oneToManyMappedBy(r, e.name, e)»
		«oneToManyMappedBy»
	«ENDFOR»
	
	«FOR r:e.features.filter(typeof(ManyToOneJoinTableRelationShipAttribute))»
		«val manyToOneJoinTable = manyToOneJoinTable(r, e.name, r.name)»
		«manyToOneJoinTable»
	«ENDFOR»
	
	«FOR r:e.features.filter(typeof(ManyToOneJoinColumnRelationShipAttribute))»
		«val manyToOneJoinColumn = manyToOneJoinColumn(r)»
		«manyToOneJoinColumn»
	«ENDFOR»

	«FOR r:e.features.filter(typeof(ManyToManyRelationshipAttribute))»
		«val manyToManyJoinTable = manyToManyJoinTable(r, e.name, e)»
		«manyToManyJoinTable»
	«ENDFOR»
	
	«FOR r:e.features.filter(typeof(ManyToManyMappedByRelationshipAttribute))»
		«val manyToManyMappedBy = manyToManyMappedBy(r, e.name)»
		«manyToManyMappedBy»
	«ENDFOR»

	/**
	 * Gets the value of the <code>'«e.identifier.name»'</code> property.
	 * 
	 * @return the <code>'«e.identifier.name»'</code> property value.
	 */  
	 public Long get«e.identifier.name.toFirstUpper()»() {
	 	return «e.identifier.name»;
	 }
	
	
	«FOR f:e.features»
		«val feature = feature(f, e.name, e)»
		«feature»
		
	«ENDFOR»
}
	'''
	
	def imports(Entity e) '''
		«FOR i:e.imports»
		import «i.importedNamespace»;
		«ENDFOR»
	'''
	
	def tablename(Entity e) '''
		«IF e.readOnly != null»«e.readOnly.tableName»«ELSE»«"WL_" + e.name.substituteCamelsForUpperCaseAndUnderScores»«ENDIF»'''
	
	def sequenceGenerator(String entityName) '''
		@SequenceGenerator(name = "«entityName.toFirstLower»IdGenerator", sequenceName = "«entityName.substituteCamelsForUpperCaseAndUnderScores»_ID_SEQ", initialValue = 1, allocationSize = 1)
	'''
	
	def identifier(Identifier i,  String entityName, String idName, Entity e) '''
		/**
		 * Mapped to «IF e.readOnly != null»«e.readOnly.tableName»«ELSE»«"WL_" + e.name.substituteCamelsForUpperCaseAndUnderScores»«ENDIF».«IF e.readOnly == null»«idName»«ELSE»«e.readOnly.idColumn»«ENDIF»
		 */
		@Id
		«IF (e.readOnly == null)»@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "«entityName»IdGenerator")«ENDIF»
		@Column(name = "«IF e.readOnly == null»«idName + "_ID"»«ELSE»«e.readOnly.idColumn»«ENDIF»", nullable = false)
		protected Long  «i.name»;
	'''
	
	def updatableAttribute(UpdatableInternalAttribute ua, String entityName) '''
		/**
		 * Mapped to WL_«entityName.substituteCamelsForUpperCaseAndUnderScores».«ua.name.substituteCamelsForUpperCaseAndUnderScores»
		 */
		@Column(name = "«ua.name.substituteCamelsForUpperCaseAndUnderScores»")
		protected «ua.type.referenced.name» «ua.name»;
	'''
		
	def oneToOneRelationship(OneToOneRelationshipAttribute r, String idName) '''	
		/**
		 * An relationship to a «r.type.referenced.name».
		 */
		@OneToOne()
		@JoinColumn(name = "«IF (r.type.referenced as Entity).readOnly == null && r.joinColumnOverride == null»«r.type.referenced.name.substituteCamelsForUpperCaseAndUnderScores + "_ID"»«ELSEIF (r.type.referenced as Entity).readOnly != null && r.joinColumnOverride == null »«idName»_ID", referencedColumnName="«(r.type.referenced as Entity).readOnly.idColumn»«ELSE»«r.joinColumnOverride»«ENDIF»")
		private «r.type.referenced.name» «r.name»;
	'''
	
	def oneToOneMappedBy(OneToOneMappedByRelationshipAttribute r, String entityName) '''
		/**
		 * An relationship to a «r.type.referenced.name».
		 */
		 @OneToOne(mappedBy = "«entityName.toFirstLower()»")
		 private «r.type.referenced.name» «r.name»;	
	'''

	def oneToManyJoinTable(OneToManyJoinTableRelationshipAttribute r, String entityName, String joinColumn, Entity e) '''
		/**
		 * An relationship to a list of «r.type.referenced.name»
		 * <p>
		 * Mapped via the join table «"WL_".generateJoinTableIdentifier(entityName.substituteCamelsForUpperCaseAndUnderScores, r.type.referenced.name.substituteCamelsForUpperCaseAndUnderScores)»
		 */
		«IF e.cacheable != null»@Cache(region = "«e.packageName».«entityName».«r.name»", usage = CacheConcurrencyStrategy.READ_WRITE, include = "all")«ENDIF»
		@OneToMany()
		@JoinTable(name = "«"WL_".generateJoinTableIdentifier(entityName.substituteCamelsForUpperCaseAndUnderScores,r.type.referenced.name.substituteCamelsForUpperCaseAndUnderScores)»",
				 joinColumns = @JoinColumn(name = "«entityName.substituteCamelsForUpperCaseAndUnderScores»_ID", referencedColumnName = "«entityName.substituteCamelsForUpperCaseAndUnderScores»_ID"), 
				 inverseJoinColumns = @JoinColumn(name = "«IF (r.type.referenced as Entity).readOnly == null»«r.type.referenced.name.substituteCamelsForUpperCaseAndUnderScores + "_ID"»«ELSE»«(r.type.referenced as Entity).readOnly.idColumn»«ENDIF»", 
				 referencedColumnName = "«IF (r.type.referenced as Entity).readOnly == null»«r.type.referenced.name.substituteCamelsForUpperCaseAndUnderScores + "_ID"»«ELSE»«(r.type.referenced as Entity).readOnly.idColumn»«ENDIF»"))
		protected List<«r.type.referenced.name»> «r.name»;
	'''
	
	def oneToManyJoinColumn(OneToManyJoinColumnRelationshipAttribute r, String entityName, String joinColumn, Entity e) '''
		/**
		 * An relationship to a list of «r.type.referenced.name»
		 * <p>
		 * Mapped via the join column on the many side of the relationship
		 */
		«IF e.cacheable != null»@Cache(region = "«e.packageName».«entityName».«r.name»", usage = CacheConcurrencyStrategy.READ_WRITE, include = "all")«ENDIF»
		@OneToMany()
		@JoinColumn(name = "«entityName.substituteCamelsForUpperCaseAndUnderScores»_ID")
		protected List<«r.type.referenced.name»> «r.name»;
	'''
	
	def oneToManyMappedBy(OneToManyMappedByRelationshipAttribute r, String entityName, Entity e)  '''
		/**
		 * An relationship to a list of «r.type.referenced.name»
		 */
		«IF e.cacheable != null»@Cache(region = "«e.packageName».«entityName».«r.name»", usage = CacheConcurrencyStrategy.READ_WRITE, include = "all")«ENDIF»
		@OneToMany(mappedBy = "«entityName.toFirstLower()»")
		protected List<«r.type.referenced.name»> «r.name»;
	'''
	
	def manyToOneJoinTable(ManyToOneJoinTableRelationShipAttribute r, String entityName, String columnName)  '''
		/**
		 * An relationship to the «r.type.referenced.name»
		 * <p>
		 * Mapped via the join table «"WL_".generateJoinTableIdentifier(entityName.substituteCamelsForUpperCaseAndUnderScores,r.type.referenced.name.substituteCamelsForUpperCaseAndUnderScores)»
		 */
		@ManyToOne
		@JoinTable(name = "«"WL_".generateJoinTableIdentifier(entityName.substituteCamelsForUpperCaseAndUnderScores,r.type.referenced.name.substituteCamelsForUpperCaseAndUnderScores)»",
		        joinColumns = @JoinColumn(name = "«entityName.substituteCamelsForUpperCaseAndUnderScores»_ID", referencedColumnName = "«entityName.substituteCamelsForUpperCaseAndUnderScores»_ID"),
		        inverseJoinColumns = @JoinColumn(name = "«IF (r.type.referenced as Entity).readOnly == null»«r.type.referenced.name.substituteCamelsForUpperCaseAndUnderScores + "_ID"»«ELSE»«(r.type.referenced as Entity).readOnly.idColumn»«ENDIF»", 
		        referencedColumnName = "«IF (r.type.referenced as Entity).readOnly == null»«r.type.referenced.name.substituteCamelsForUpperCaseAndUnderScores + "_ID"»«ELSE»«(r.type.referenced as Entity).readOnly.idColumn»«ENDIF»"))
		protected «r.type.referenced.name» «r.name»;
	'''
	
	def manyToOneJoinColumn(ManyToOneJoinColumnRelationShipAttribute r) '''
		/**
		 * An relationship to the «r.type.referenced.name»
		 * <p>
		 * Mapped via the join column «IF (r.type.referenced as Entity).readOnly == null»«r.type.referenced.name.substituteCamelsForUpperCaseAndUnderScores + "_ID"»«ELSE»«(r.type.referenced as Entity).readOnly.idColumn»«ENDIF»
		 */
		@ManyToOne()
		@JoinColumn(name = "«IF (r.type.referenced as Entity).readOnly == null && r.joinColumnOverride == null»«r.type.referenced.name.substituteCamelsForUpperCaseAndUnderScores + "_ID"»«ELSEIF (r.type.referenced as Entity).readOnly != null && r.joinColumnOverride == null»«(r.type.referenced as Entity).readOnly.idColumn»«ELSE»«r.joinColumnOverride»«ENDIF»")
		protected «r.type.referenced.name» «r.name»;
	'''
	
	def manyToOneMappedBy(ManyToOneMappedByRelationShipAttribute r, String entityName) '''
		/**
		 * An relationship to the «r.type.referenced.name»
		 */
		@ManyToOne(mappedBy = "«entityName.toPlural.toFirstLower()»")
		protected «r.type.referenced.name» «r.name»;		
	'''
	
	def manyToManyJoinTable(ManyToManyRelationshipAttribute b, String entityName, Entity e) '''
		/**
		 * An ordered list of «b.type.referenced.name» that relate to this
		 * «entityName».
		 * <p>
		 * Mapped via the join table «"WL_".generateJoinTableIdentifier(entityName.substituteCamelsForUpperCaseAndUnderScores,b.type.referenced.name.substituteCamelsForUpperCaseAndUnderScores)».
		 */
		«IF e.cacheable != null»@Cache(region = "«e.packageName».«entityName».«b.name»", usage = CacheConcurrencyStrategy.READ_WRITE, include = "all")«ENDIF»
		@ManyToMany()
		@JoinTable(name = "«"WL_".generateJoinTableIdentifier(entityName.substituteCamelsForUpperCaseAndUnderScores,b.type.referenced.name.substituteCamelsForUpperCaseAndUnderScores)»", 
				joinColumns = @JoinColumn(name = "«entityName.substituteCamelsForUpperCaseAndUnderScores»_ID", referencedColumnName = "«entityName.substituteCamelsForUpperCaseAndUnderScores»_ID"), 
				inverseJoinColumns = @JoinColumn(name = "«IF (b.type.referenced as Entity).readOnly == null»«b.type.referenced.name.substituteCamelsForUpperCaseAndUnderScores + "_ID"»«ELSE»«(b.type.referenced as Entity).readOnly.idColumn»«ENDIF»", 
				referencedColumnName = "«IF (b.type.referenced as Entity).readOnly == null»«b.type.referenced.name.substituteCamelsForUpperCaseAndUnderScores + "_ID"»«ELSE»«(b.type.referenced as Entity).readOnly.idColumn»«ENDIF»"))
		protected List<«b.type.referenced.name»> «b.name»;	
	'''
	
	def manyToManyMappedBy(ManyToManyMappedByRelationshipAttribute r, String entityName) '''
		/**
		 * An ordered list of «r.type.referenced.name» that relate to this
		 * «entityName».
		 */
		@ManyToMany(mappedBy = "«entityName.toPlural().toFirstLower()»")
		protected List<«r.type.referenced.name»> «r.name»;
	'''

	
	def feature(Feature f, String entityName, Entity e) '''
		«IF (f.type.multi && !(f instanceof IdAttribute))»
		/**
		 * Add a new «f.type.referenced.name» to this «entityName».
		 * 
		 * @param «f.name.toSingular»
		 *            the «f.type.referenced.name» to add
		 */
		public void add«f.type.referenced.name»(final «f.type.referenced.name» «f.name.toSingular») {
			if («f.name» == null) {
				«f.name» = new ArrayList<«f.type.referenced.name»>();
			}
		
			«f.name».add(«f.name.toSingular»);
		}«ENDIF»
		«IF (!(f instanceof IdAttribute))»
		/**
		 * Gets the value of the <code>'«f.name»'</code> property.
		 * 
		 * @return the <code>'«f.name»'</code> property value.
		 */  
		 public «IF (!f.type.multi)»«f.type.referenced.name» «ELSEIF (f.type.multi)»List<«f.type.referenced.name»> «ENDIF» get«f.name.toFirstUpper()»() {
		 	return «f.name»;
		 }«ENDIF»
		
		«IF (e.readOnly == null && !(f instanceof IdAttribute))»
		/**
		 * Sets the value of the <code>'«f.name»'</code> property.
		 * <p/>
		 * 
		 * @param name
		 *            the <code>'«f.name»'</code> property value.
		 */  
		public void set«f.name.toFirstUpper()»(«IF (!f.type.multi)»«f.type.referenced.name» «f.name»«ELSEIF (f.type.multi)»List<«f.type.referenced.name»> «f.name» «ENDIF») {
		 	this.«f.name» = «f.name»;
		}
		«ENDIF»
	'''

}
