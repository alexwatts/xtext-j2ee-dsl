/*
* generated by Xtext
*/
package jpadsl.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import jpadsl.services.JPADslGrammarAccess;

public class JPADslParser extends AbstractContentAssistParser {
	
	@Inject
	private JPADslGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected jpadsl.ui.contentassist.antlr.internal.InternalJPADslParser createParser() {
		jpadsl.ui.contentassist.antlr.internal.InternalJPADslParser result = new jpadsl.ui.contentassist.antlr.internal.InternalJPADslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getAbstractElementAccess().getAlternatives(), "rule__AbstractElement__Alternatives");
					put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
					put(grammarAccess.getIdentifierAccess().getAlternatives(), "rule__Identifier__Alternatives");
					put(grammarAccess.getFeatureAccess().getAlternatives(), "rule__Feature__Alternatives");
					put(grammarAccess.getStructuralFeatureAccess().getAlternatives(), "rule__StructuralFeature__Alternatives");
					put(grammarAccess.getAttributeAccess().getAlternatives(), "rule__Attribute__Alternatives");
					put(grammarAccess.getInternalAttributeAccess().getAlternatives(), "rule__InternalAttribute__Alternatives");
					put(grammarAccess.getRelationshipAttributeAccess().getAlternatives(), "rule__RelationshipAttribute__Alternatives");
					put(grammarAccess.getSingularRelationshipAttributeAccess().getAlternatives(), "rule__SingularRelationshipAttribute__Alternatives");
					put(grammarAccess.getMultipleRelationshipAttributeAccess().getAlternatives(), "rule__MultipleRelationshipAttribute__Alternatives");
					put(grammarAccess.getTypedElementAccess().getAlternatives(), "rule__TypedElement__Alternatives");
					put(grammarAccess.getVisibilityAccess().getAlternatives(), "rule__Visibility__Alternatives");
					put(grammarAccess.getImportAccess().getGroup(), "rule__Import__Group__0");
					put(grammarAccess.getPackageDeclarationAccess().getGroup(), "rule__PackageDeclaration__Group__0");
					put(grammarAccess.getDataTypeAccess().getGroup(), "rule__DataType__Group__0");
					put(grammarAccess.getDatabaseModeAccess().getGroup(), "rule__DatabaseMode__Group__0");
					put(grammarAccess.getEntityAccess().getGroup(), "rule__Entity__Group__0");
					put(grammarAccess.getEntityAccess().getGroup_3(), "rule__Entity__Group_3__0");
					put(grammarAccess.getReadOnlyAccess().getGroup(), "rule__ReadOnly__Group__0");
					put(grammarAccess.getCacheableAccess().getGroup(), "rule__Cacheable__Group__0");
					put(grammarAccess.getUniqueIdentiferColumnAccess().getGroup(), "rule__UniqueIdentiferColumn__Group__0");
					put(grammarAccess.getEmbeddedUniqueIdentiferAccess().getGroup(), "rule__EmbeddedUniqueIdentifer__Group__0");
					put(grammarAccess.getStaticAttributeAccess().getGroup(), "rule__StaticAttribute__Group__0");
					put(grammarAccess.getReadOnlyInternalAttributeAccess().getGroup(), "rule__ReadOnlyInternalAttribute__Group__0");
					put(grammarAccess.getUpdatableInternalAttributeAccess().getGroup(), "rule__UpdatableInternalAttribute__Group__0");
					put(grammarAccess.getTransientAttributeAccess().getGroup(), "rule__TransientAttribute__Group__0");
					put(grammarAccess.getIdAttributeAccess().getGroup(), "rule__IdAttribute__Group__0");
					put(grammarAccess.getOneToOneRelationshipAttributeAccess().getGroup(), "rule__OneToOneRelationshipAttribute__Group__0");
					put(grammarAccess.getOneToOneMappedByRelationshipAttributeAccess().getGroup(), "rule__OneToOneMappedByRelationshipAttribute__Group__0");
					put(grammarAccess.getOneToManyJoinTableRelationshipAttributeAccess().getGroup(), "rule__OneToManyJoinTableRelationshipAttribute__Group__0");
					put(grammarAccess.getOneToManyJoinColumnRelationshipAttributeAccess().getGroup(), "rule__OneToManyJoinColumnRelationshipAttribute__Group__0");
					put(grammarAccess.getOneToManyMappedByRelationshipAttributeAccess().getGroup(), "rule__OneToManyMappedByRelationshipAttribute__Group__0");
					put(grammarAccess.getManyToOneJoinColumnRelationShipAttributeAccess().getGroup(), "rule__ManyToOneJoinColumnRelationShipAttribute__Group__0");
					put(grammarAccess.getManyToOneJoinTableRelationShipAttributeAccess().getGroup(), "rule__ManyToOneJoinTableRelationShipAttribute__Group__0");
					put(grammarAccess.getManyToOneMappedByRelationShipAttributeAccess().getGroup(), "rule__ManyToOneMappedByRelationShipAttribute__Group__0");
					put(grammarAccess.getManyToManyRelationshipAttributeAccess().getGroup(), "rule__ManyToManyRelationshipAttribute__Group__0");
					put(grammarAccess.getManyToManyMappedByRelationshipAttributeAccess().getGroup(), "rule__ManyToManyMappedByRelationshipAttribute__Group__0");
					put(grammarAccess.getReferenceAccess().getGroup(), "rule__Reference__Group__0");
					put(grammarAccess.getReferenceAccess().getGroup_4(), "rule__Reference__Group_4__0");
					put(grammarAccess.getOperationAccess().getGroup(), "rule__Operation__Group__0");
					put(grammarAccess.getOperationAccess().getGroup_4(), "rule__Operation__Group_4__0");
					put(grammarAccess.getOperationAccess().getGroup_4_1(), "rule__Operation__Group_4_1__0");
					put(grammarAccess.getParameterAccess().getGroup(), "rule__Parameter__Group__0");
					put(grammarAccess.getTypeRefAccess().getGroup(), "rule__TypeRef__Group__0");
					put(grammarAccess.getQualifiedNameWithWildCardAccess().getGroup(), "rule__QualifiedNameWithWildCard__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
					put(grammarAccess.getModelAccess().getElementsAssignment(), "rule__Model__ElementsAssignment");
					put(grammarAccess.getImportAccess().getImportedNamespaceAssignment_1(), "rule__Import__ImportedNamespaceAssignment_1");
					put(grammarAccess.getPackageDeclarationAccess().getNameAssignment_1(), "rule__PackageDeclaration__NameAssignment_1");
					put(grammarAccess.getPackageDeclarationAccess().getDatabaseModesAssignment_3(), "rule__PackageDeclaration__DatabaseModesAssignment_3");
					put(grammarAccess.getPackageDeclarationAccess().getElementsAssignment_4(), "rule__PackageDeclaration__ElementsAssignment_4");
					put(grammarAccess.getDataTypeAccess().getNameAssignment_1(), "rule__DataType__NameAssignment_1");
					put(grammarAccess.getDatabaseModeAccess().getNameAssignment_1(), "rule__DatabaseMode__NameAssignment_1");
					put(grammarAccess.getEntityAccess().getNameAssignment_1(), "rule__Entity__NameAssignment_1");
					put(grammarAccess.getEntityAccess().getDatabaseVendorAssignment_2(), "rule__Entity__DatabaseVendorAssignment_2");
					put(grammarAccess.getEntityAccess().getSuperTypeAssignment_3_1(), "rule__Entity__SuperTypeAssignment_3_1");
					put(grammarAccess.getEntityAccess().getReadOnlyAssignment_4(), "rule__Entity__ReadOnlyAssignment_4");
					put(grammarAccess.getEntityAccess().getCacheableAssignment_5(), "rule__Entity__CacheableAssignment_5");
					put(grammarAccess.getEntityAccess().getIdentifierAssignment_7(), "rule__Entity__IdentifierAssignment_7");
					put(grammarAccess.getEntityAccess().getImportsAssignment_8(), "rule__Entity__ImportsAssignment_8");
					put(grammarAccess.getEntityAccess().getFeaturesAssignment_9(), "rule__Entity__FeaturesAssignment_9");
					put(grammarAccess.getReadOnlyAccess().getTableNameAssignment_1(), "rule__ReadOnly__TableNameAssignment_1");
					put(grammarAccess.getReadOnlyAccess().getIdColumnAssignment_2(), "rule__ReadOnly__IdColumnAssignment_2");
					put(grammarAccess.getUniqueIdentiferColumnAccess().getNameAssignment_1(), "rule__UniqueIdentiferColumn__NameAssignment_1");
					put(grammarAccess.getEmbeddedUniqueIdentiferAccess().getNameAssignment_1(), "rule__EmbeddedUniqueIdentifer__NameAssignment_1");
					put(grammarAccess.getStaticAttributeAccess().getNameAssignment_1(), "rule__StaticAttribute__NameAssignment_1");
					put(grammarAccess.getStaticAttributeAccess().getTypeAssignment_3(), "rule__StaticAttribute__TypeAssignment_3");
					put(grammarAccess.getReadOnlyInternalAttributeAccess().getNameAssignment_0(), "rule__ReadOnlyInternalAttribute__NameAssignment_0");
					put(grammarAccess.getReadOnlyInternalAttributeAccess().getTypeAssignment_2(), "rule__ReadOnlyInternalAttribute__TypeAssignment_2");
					put(grammarAccess.getUpdatableInternalAttributeAccess().getNameAssignment_1(), "rule__UpdatableInternalAttribute__NameAssignment_1");
					put(grammarAccess.getUpdatableInternalAttributeAccess().getTypeAssignment_3(), "rule__UpdatableInternalAttribute__TypeAssignment_3");
					put(grammarAccess.getTransientAttributeAccess().getNameAssignment_1(), "rule__TransientAttribute__NameAssignment_1");
					put(grammarAccess.getTransientAttributeAccess().getTypeAssignment_3(), "rule__TransientAttribute__TypeAssignment_3");
					put(grammarAccess.getIdAttributeAccess().getNameAssignment_1(), "rule__IdAttribute__NameAssignment_1");
					put(grammarAccess.getIdAttributeAccess().getTypeAssignment_3(), "rule__IdAttribute__TypeAssignment_3");
					put(grammarAccess.getOneToOneRelationshipAttributeAccess().getNameAssignment_1(), "rule__OneToOneRelationshipAttribute__NameAssignment_1");
					put(grammarAccess.getOneToOneRelationshipAttributeAccess().getTypeAssignment_3(), "rule__OneToOneRelationshipAttribute__TypeAssignment_3");
					put(grammarAccess.getOneToOneRelationshipAttributeAccess().getJoinColumnOverrideAssignment_4(), "rule__OneToOneRelationshipAttribute__JoinColumnOverrideAssignment_4");
					put(grammarAccess.getOneToOneMappedByRelationshipAttributeAccess().getNameAssignment_1(), "rule__OneToOneMappedByRelationshipAttribute__NameAssignment_1");
					put(grammarAccess.getOneToOneMappedByRelationshipAttributeAccess().getTypeAssignment_3(), "rule__OneToOneMappedByRelationshipAttribute__TypeAssignment_3");
					put(grammarAccess.getOneToManyJoinTableRelationshipAttributeAccess().getNameAssignment_1(), "rule__OneToManyJoinTableRelationshipAttribute__NameAssignment_1");
					put(grammarAccess.getOneToManyJoinTableRelationshipAttributeAccess().getTypeAssignment_3(), "rule__OneToManyJoinTableRelationshipAttribute__TypeAssignment_3");
					put(grammarAccess.getOneToManyJoinColumnRelationshipAttributeAccess().getNameAssignment_1(), "rule__OneToManyJoinColumnRelationshipAttribute__NameAssignment_1");
					put(grammarAccess.getOneToManyJoinColumnRelationshipAttributeAccess().getTypeAssignment_3(), "rule__OneToManyJoinColumnRelationshipAttribute__TypeAssignment_3");
					put(grammarAccess.getOneToManyMappedByRelationshipAttributeAccess().getNameAssignment_1(), "rule__OneToManyMappedByRelationshipAttribute__NameAssignment_1");
					put(grammarAccess.getOneToManyMappedByRelationshipAttributeAccess().getTypeAssignment_3(), "rule__OneToManyMappedByRelationshipAttribute__TypeAssignment_3");
					put(grammarAccess.getManyToOneJoinColumnRelationShipAttributeAccess().getNameAssignment_1(), "rule__ManyToOneJoinColumnRelationShipAttribute__NameAssignment_1");
					put(grammarAccess.getManyToOneJoinColumnRelationShipAttributeAccess().getTypeAssignment_3(), "rule__ManyToOneJoinColumnRelationShipAttribute__TypeAssignment_3");
					put(grammarAccess.getManyToOneJoinColumnRelationShipAttributeAccess().getJoinColumnOverrideAssignment_4(), "rule__ManyToOneJoinColumnRelationShipAttribute__JoinColumnOverrideAssignment_4");
					put(grammarAccess.getManyToOneJoinTableRelationShipAttributeAccess().getNameAssignment_1(), "rule__ManyToOneJoinTableRelationShipAttribute__NameAssignment_1");
					put(grammarAccess.getManyToOneJoinTableRelationShipAttributeAccess().getTypeAssignment_3(), "rule__ManyToOneJoinTableRelationShipAttribute__TypeAssignment_3");
					put(grammarAccess.getManyToOneMappedByRelationShipAttributeAccess().getNameAssignment_1(), "rule__ManyToOneMappedByRelationShipAttribute__NameAssignment_1");
					put(grammarAccess.getManyToOneMappedByRelationShipAttributeAccess().getTypeAssignment_3(), "rule__ManyToOneMappedByRelationShipAttribute__TypeAssignment_3");
					put(grammarAccess.getManyToManyRelationshipAttributeAccess().getNameAssignment_1(), "rule__ManyToManyRelationshipAttribute__NameAssignment_1");
					put(grammarAccess.getManyToManyRelationshipAttributeAccess().getTypeAssignment_3(), "rule__ManyToManyRelationshipAttribute__TypeAssignment_3");
					put(grammarAccess.getManyToManyMappedByRelationshipAttributeAccess().getNameAssignment_1(), "rule__ManyToManyMappedByRelationshipAttribute__NameAssignment_1");
					put(grammarAccess.getManyToManyMappedByRelationshipAttributeAccess().getTypeAssignment_3(), "rule__ManyToManyMappedByRelationshipAttribute__TypeAssignment_3");
					put(grammarAccess.getReferenceAccess().getNameAssignment_1(), "rule__Reference__NameAssignment_1");
					put(grammarAccess.getReferenceAccess().getTypeAssignment_3(), "rule__Reference__TypeAssignment_3");
					put(grammarAccess.getReferenceAccess().getOppositeAssignment_4_1(), "rule__Reference__OppositeAssignment_4_1");
					put(grammarAccess.getOperationAccess().getVisibilityAssignment_0(), "rule__Operation__VisibilityAssignment_0");
					put(grammarAccess.getOperationAccess().getNameAssignment_2(), "rule__Operation__NameAssignment_2");
					put(grammarAccess.getOperationAccess().getParamsAssignment_4_0(), "rule__Operation__ParamsAssignment_4_0");
					put(grammarAccess.getOperationAccess().getParamsAssignment_4_1_1(), "rule__Operation__ParamsAssignment_4_1_1");
					put(grammarAccess.getOperationAccess().getTypeAssignment_7(), "rule__Operation__TypeAssignment_7");
					put(grammarAccess.getParameterAccess().getNameAssignment_0(), "rule__Parameter__NameAssignment_0");
					put(grammarAccess.getParameterAccess().getTypeAssignment_1(), "rule__Parameter__TypeAssignment_1");
					put(grammarAccess.getTypeRefAccess().getReferencedAssignment_0(), "rule__TypeRef__ReferencedAssignment_0");
					put(grammarAccess.getTypeRefAccess().getMultiAssignment_1(), "rule__TypeRef__MultiAssignment_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			jpadsl.ui.contentassist.antlr.internal.InternalJPADslParser typedParser = (jpadsl.ui.contentassist.antlr.internal.InternalJPADslParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public JPADslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(JPADslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
