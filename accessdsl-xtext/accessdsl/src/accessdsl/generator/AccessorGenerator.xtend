/*
 * generated by Xtext
 */
package accessdsl.generator

import accessdsl.accessDsl.QueryAndTypeMapping
import accessdsl.accessDsl.Unit
import com.google.inject.Inject
import accessdsl.accessDsl.QueryMapping
import org.eclipse.xtext.common.types.JvmFormalParameter
import accessdsl.accessDsl.MultipleResultQueryMapping
import accessdsl.accessDsl.SingleResultQueryMapping

class AccessorGenerator  {
	
	@Inject extension AccessDslGeneratorExtensions generatorExtensions
	
	def compileAccessor(Unit u) '''
/**
 * «u.name.toFirstUpper() + "AccessorBean.java"»
 */
 
 package «u.^package.name»;
 
 import «u.^package.name + ".*"»;
 import javax.ejb.*;
 import java.util.*;
 import java.io.Serializable;
 

public class «u.name.toFirstUpper() + "Accessor"» {
	
	private EntityManager em;

	//A Constructor which initialises the accessor
	//and is provided an Entity Manager

	«FOR qm:u.querymapping»
		«val querymapping = queryMapping(qm)»
		«querymapping»
	«ENDFOR»

}
'''	

def queryMapping(QueryAndTypeMapping qm) '''
	public «qm.typeMapping.name» «qm.name» ( «FOR qp:qm.queryParameters»«val queryParamater = queryParameter(qp,qm.queryParameters.last)»«queryParamater»«ENDFOR» ) {
		
		final Query query = em.createNamedQuery("«qm.query.namedQuery.name»");
		
        «IF !qm.queryParameters.isEmpty()»«FOR qp:qm.queryParameters»
		query.setParameter("«qp.name»", «qp.name»);
        «ENDFOR»
        «ENDIF»
		
		return new «qm.typeMapping.name»(em.«IF qm instanceof SingleResultQueryMapping»getSingleResult()«ELSE»getResultList()«ENDIF»);
		
	}
	'''
	
	def queryParameter(JvmFormalParameter qp, JvmFormalParameter last) '''«qp.parameterType.simpleName» «qp.name»«IF qp != last», «ENDIF»'''
	
	
	def queryParameterLiteral(JvmFormalParameter qp, JvmFormalParameter last) '''«qp.name»«IF qp != last», «ENDIF»'''


}