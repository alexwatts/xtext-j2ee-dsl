/*
 * generated by Xtext
 */
package accessdsl.generator

import accessdsl.accessDsl.QueryAndTypeMapping
import accessdsl.accessDsl.Unit
import com.google.inject.Inject
import accessdsl.accessDsl.QueryMapping
import org.eclipse.xtext.common.types.JvmFormalParameter
import accessdsl.accessDsl.MultipleResultQueryMapping

class EJBAccessorGenerator  {
	
	@Inject extension AccessDslGeneratorExtensions generatorExtensions
	
	def compileEjbAccessor(Unit u) '''
/**
 * «u.name.toFirstUpper() + "EJBAccessorBean.java"»
 */
 
 package «u.^package.name»;
 
 import «u.^package.name + ".*"»;
 import javax.ejb.*;
 import java.util.*;
 import java.io.Serializable;
 import java.util.List;
 import javax.persistence.*;
 
/**
 * This Accessor class provides access to domain
 * objects. The general pattern used is to invoke a method
 * on a Query service with a conversion of the result into
 * a container which encapsulates concrete types.
 */
@Stateless
@SuppressWarnings({ "unchecked" })
public class «u.name.toFirstUpper() + "EJBAccessorBean"» implements  «u.name.toFirstUpper() + "EJBAccessor"» {
	
	private «u.name.toFirstUpper() + "Accessor"» accessor;
	
	@PersistenceContext
	private EntityManager em;

	«FOR qm:u.querymapping»
		«val querymapping = queryMapping(qm)»
		«querymapping»
	«ENDFOR»

}
'''	

def queryMapping(QueryAndTypeMapping qm) '''
	«IF qm.query instanceof MultipleResultQueryMapping»
	public List<«qm.typeMapping.name»> «qm.name» ( «FOR qp:qm.queryParameters»«val queryParamater = queryParameter(qp,qm.queryParameters.last)»«queryParamater»«ENDFOR»   ) {
		return accessor.«qm.name»(«FOR qp:qm.queryParameters»«val queryParameterLiteral = queryParameterLiteral(qp,qm.queryParameters.last)»«queryParameterLiteral»«ENDFOR»);
		
	}
	«ELSE»
	public «qm.typeMapping.name» «qm.name» ( «FOR qp:qm.queryParameters»«val queryParamater = queryParameter(qp,qm.queryParameters.last)»«queryParamater»«ENDFOR» ) {
		
		return accessor.«qm.name»(«FOR qp:qm.queryParameters»«val queryParameterLiteral = queryParameterLiteral(qp,qm.queryParameters.last)»«queryParameterLiteral»«ENDFOR»);
		
	}
	«ENDIF»
	'''
	
	def queryParameter(JvmFormalParameter qp, JvmFormalParameter last) '''«qp.parameterType.simpleName» «qp.name»«IF qp != last», «ENDIF»'''
	
	
	def queryParameterLiteral(JvmFormalParameter qp, JvmFormalParameter last) '''«qp.name»«IF qp != last», «ENDIF»'''


}