/*
 * generated by Xtext
 */
package accessdsl.generator

import accessdsl.accessDsl.ContainedEntity
import accessdsl.accessDsl.Container
import accessdsl.accessDsl.Unit
import com.google.inject.Inject
import org.eclipse.emf.common.util.EList
import accessdsl.accessDsl.ContainerElement

class ContainerGenerator  {
	
	@Inject extension AccessDslGeneratorExtensions generatorExtensions
	
	def compileContainer(Container c, Unit u) '''
/**
 * «c.name.toFirstUpper() + ".java"»
 */
 
 package «u.^package.name»;
 
 import «u.^package.name + ".*"»;
 import java.util.List;
 import java.io.Serializable;
 import java.util.Date;
 
 
/**
 * This is a container object used to manage JPA domain objects in 
 * a type safe way. The intention is that the result of a JPA
 * query is passed into the constructor of this container to obtain
 * an instance of this container which encapsulates concrete domain
 * types.
 * 
 * This is an alternative to working with results types of type
 * Object or Object[] which is the default result type
 * when running queries using the Entity Manager. 
 */

public class «c.name.toFirstUpper()» implements Serializable {
	«FOR ce:c.containerElements»
		«val attribute = attribute(ce)»
		«attribute»
	«ENDFOR»
	
	
	/**
	 * Constructs a new instance of this container representing the results
	 * of a JPA query which is passed as a parameter to this constructor.
	 */
	public «c.name.toFirstUpper()»(Object«IF c.containerElements.size > 1»[]«ENDIF» queryResult) {
		
		/**
		 * Initialise the internal state of this container using the 
		 * provided query results.
		 */
		«FOR ce:c.containerElements»
			«val initialiser = initialiser(ce, c.containerElements)»
			«initialiser»
		«ENDFOR»
		
	}

	«FOR ce:c.containerElements»
		«val getterAndSetter = getterAndSetter(ce)»
		«getterAndSetter»
	«ENDFOR»

}
	'''

	def attribute(ContainerElement c) '''
	/**
	 * The «c.entity.contained.name.toFirstLower()».
	 */
	private «c.entity.contained.name» «c.alias»;
	'''
	
	def initialiser(ContainerElement c, EList<ContainerElement> elements) '''
		this.«c.alias» = («c.entity.contained.name») queryResult«IF elements.size > 1»[«elements.indexOf(c)»]«ENDIF»;
	'''

	def getterAndSetter(ContainerElement ce) '''
	/**
	 * @return the «ce.alias»
	 */
	public «ce.entity.contained.name» get«ce.alias.toFirstUpper()»() {
		return «ce.alias»;
	}

	/**
	 * @param feature the feature to set
	 */
	public void set«ce.alias.toFirstUpper()»(«ce.entity.contained.name» «ce.alias») {
		this.«ce.alias» = «ce.alias»;
	}
	'''

}